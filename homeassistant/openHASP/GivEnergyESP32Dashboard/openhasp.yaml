givenergy:
  objects:
    - obj: "p0b1" # time
      properties:
        "text": "{{ states('sensor.time') }}"
    - obj: "p0b2" # wifi sensor
      properties:
        "text_color": >
          {% if state_attr('openhasp.<YourDevice>','rssi')|int <= -50 %}
          green
          {% elif state_attr('openhasp.<YourDevice>','rssi')|int <= -60 and state_attr('openhasp.<YourDevice>','rssi')|int < -50 %}
          orange
          {% elif state_attr('openhasp.<YourDevice>','rssi')|int <= -70 and state_attr('openhasp.<YourDevice>','rssi')|int < -60 %}
          tomato
          {% elif state_attr('openhasp.<YourDevice>','rssi')|int < -70 %}
          red
          {% else %}
          grey
          {% endif %}
    - obj: "p0b3" # outside temperature
      properties:
        "text": "{{ states('sensor.<YourOutsideTempSensor>')|round(1) }}Â°C"
    - obj: "p1b3" # battery soc icon
      properties:
        "text_color": >
          {% if states('sensor.givtcp_<YourSerial>_soc')|int >= 80 %}
          green
          {% elif states('sensor.givtcp_<YourSerial>_soc')|int >= 50 and states('sensor.givtcp_<YourSerial>_soc')|int < 80 %}
          yellow
          {% elif states('sensor.givtcp_<YourSerial>_soc')|int > 20 and states('sensor.givtcp_<YourSerial>_soc')|int < 50 %}
          orange
          {% else %}
          red
          {% endif %}
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_soc')|int >= 90 %}
          {{ "\uF2A3" | e }}
          {% elif states('sensor.givtcp_<YourSerial>_soc')|int >= 50 and states('sensor.givtcp_<YourSerial>_soc')|int < 80 %}
          {{ "\uF2A2" | e }}
          {% elif states('sensor.givtcp_<YourSerial>_soc')|int > 20 and states('sensor.givtcp_<YourSerial>_soc')|int < 50 %}
          {{ "\uF2A1" | e }}
          {% else %}
          {{ "\uE08E" | e }}
          {% endif %}
    - obj: "p1b4" # solar icon
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_pv_power')|int == 0 and states('sun.sun') == 'above_horizon' %}
          {{ "\uE590" | e }}
          {% elif states('sensor.givtcp_<YourSerial>_pv_power')|int == 0 and states('sun.sun') == 'below_horizon' %}
          {{ "\uE594" | e }}
          {% else %}
          {{ "\uE5A8" | e }}
          {% endif %}
    - obj: "p1b5" # house <-> grid arrow
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_import_power')|int < 0  %}
          {{ "\uE05D" | e }}
          {% elif states('sensor.givtcp_<YourSerial>_import_power')|int > 0  %}
          {{ "\uE045" | e }}
          {% else %}
          {{ "\uE374" | e }}
          {% endif %}
    - obj: "p1b6" # battery <-> house arrow
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_battery_power')|int < 0  %}
          {{ "\uE045" | e }}
          {% elif states('sensor.givtcp_<YourSerial>_battery_power')|int > 0  %}
          {{ "\uE05D" | e }}
          {% else %}
          {{ "\uE374" | e }}
          {% endif %}
    - obj: "p1b7" # pv generation arrow
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_pv_power')|int == 0  %}
          {{ "\uE374" | e }}
          {% else %}
          {{ "\uE054" | e }}
          {% endif %}
    - obj: "p1b8" # grid load label
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_import_power')|int < 1000  %}        
          Grid: {{ states('sensor.givtcp_<YourSerial>_import_power')|int|round(0) if not (is_state('sensor.givtcp_<YourSerial>_load_power','unavailable')) }} W
          {% else %}
          Grid: {{ (states('sensor.givtcp_<YourSerial>_import_power')|int / 1000)|round(2) if not (is_state('sensor.givtcp_<YourSerial>_load_power','unavailable')) }} kW
          {% endif %}
    - obj: "p1b9" # current unit rate label
      properties:
        "text": "Rate: {{ states('sensor.octopus_energy_electricity_<YourElectricityMeter>_current_rate')|float|round(3) if not (is_state('sensor.octopus_energy_electricity_<YourElectricityMeter>_current_rate','unavailable')) }}p/kWh"
    - obj: "p1b10" # battery power label
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_battery_power')|int < 1000  %}        
          {{ states('sensor.givtcp_<YourSerial>_battery_power')|int|round(0) if not (is_state('sensor.givtcp_<YourSerial>_load_power','unavailable')) }} W
          {% else %}
          {{ (states('sensor.givtcp_<YourSerial>_battery_power')|int / 1000)|round(2) if not (is_state('sensor.givtcp_<YourSerial>_load_power','unavailable')) }} kW
          {% endif %}
    - obj: "p1b11" # battery soc
      properties:
        "text": "{{ states('sensor.givtcp_<YourSerial>_soc') | int if not (is_state('sensor.givtcp_<YourSerial>_soc','unavailable')) }}%"
    - obj: "p1b12" # battery charge status
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_battery_power')|int < 0  %}
          Charging
          {% elif states('sensor.givtcp_<YourSerial>_battery_power')|int > 0  %}
          Discharging
          {% elif states('sensor.givtcp_<YourSerial>_battery_power')|int == 0  %}
          Idle
          {% else %}
          --------
          {% endif %}
    - obj: "p1b13" # pv generation label
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_pv_power')|int > 0 and states('sensor.givtcp_<YourSerial>_pv_power')|int < 1000  %}        
          {{ states('sensor.givtcp_<YourSerial>_pv_power')|int|round(0) if not (is_state('sensor.givtcp_<YourSerial>_load_power','unavailable')) }} W
          {% elif states('sensor.givtcp_<YourSerial>_pv_power')|int >= 1000  %}
          {{ (states('sensor.givtcp_<YourSerial>_pv_power')|int / 1000)|round(2) if not (is_state('sensor.givtcp_<YourSerial>_load_power','unavailable')) }} kW
          {% else %}
          Idle
          {% endif %}
    - obj: "p1b14" # house load label
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_load_power')|int < 1000  %}        
          {{ states('sensor.givtcp_<YourSerial>_load_power')|int|round(0) if not (is_state('sensor.givtcp_<YourSerial>_load_power','unavailable')) }}
          {% else %}
          {{ (states('sensor.givtcp_<YourSerial>_load_power')|int / 1000)|round(2) if not (is_state('sensor.givtcp_<YourSerial>_load_power','unavailable')) }}
          {% endif %}
    - obj: "p1b15" # house load unit label
      properties:
        "text": >
          {% if states('sensor.givtcp_<YourSerial>_load_power')|int > 999  %}
          kW
          {% else %}
          watts
          {% endif %}
    - obj: "p1b17" # EVC icon
      properties:
        "text_color": >
          {% if states('sensor.<YourEVSoCSensor>')|int >= 80 %}
          green
          {% elif states('sensor.<YourEVSoCSensor>')|int >= 50 and states('sensor.<YourEVSoCSensor>')|int < 80 %}
          yellow
          {% elif states('sensor.<YourEVSoCSensor>')|int > 20 and states('sensor.<YourEVSoCSensor>')|int < 50 %}
          orange
          {% else %}
          red
          {% endif %}
    - obj: "p1b18" # EVC arrow
      properties:
        "text": >
          {% if states('sensor.<YourEVCPowerSensor>')|int > 0  %}
          {{ "\uE04D" | e }}
          {% else %}
          {{ "\uE374" | e }}
          {% endif %}
    - obj: "p1b19" # EVC power
      properties:
        "text": >
          {% if states('sensor.<YourEVCPowerSensor>')|int > 0  %}
          {{ states('sensor.<YourEVCPowerSensor>')|float|round(1) if not (is_state('sensor.<YourEVCPowerSensor>','unavailable')) }} kW
          {% else %}
          {{ "Idle" | e }}
          {% endif %}
    - obj: "p1b20" # EV SoC
      properties:
        "text": >
          {{ states('sensor.<YourEVSoCSensor>')|int|round(0) if not (is_state('sensor.sensor.<YourEVSoCSensor>','unavailable')) }}%
