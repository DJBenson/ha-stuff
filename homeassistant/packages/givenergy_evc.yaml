# An all in one, easy to implement package to interface the GivEnergy EV Charger with Home Assistant using the GivEnergy Cloud.
#
# Instructions to install:
# 1) Ensure you have a folder named packages in your config folder
# 2) Include the folder in your configuration.yaml under the homeassistant: node as such: packages: !include_dir_named packages/
# 3) Download or copy/paste the contents of this file to config/packages/givenergy_evc.yaml
# 4) Generate an API key via the GivEnergy portal
# 5) Add your API key to secrets.yaml ensuring you retain the word "Bearer", e.g. givenergy_apikey: "Bearer <YourKey>"
# 6) Restart Home Assistant
#
# Credit to Oliver Shingler (AKA Speak To The Geek) for the inspiration.
#
# This version has the following differences/improvements;
# * Almost feature-complete alignment with the app/portal (scheduling and RFID tag support is not yet available)
# * Single package file which can be dragged and dropped into Home Assistant with little effort
# * Implements a select (drop down) for the charger mode rather than individual switches. Original switches included for those who prefer them
# * Split the sensors for "plugged in" and "charging"
# * Various state-based icon templates
# * More stuff I likely forgot

input_select:
  givenergy_evc_mode:
    name: "GivEnergy EVC Mode"
    options:
      - "Solar"
      - "Hybrid"
      - "Grid"
      - "Inverter Control"
    initial: "Grid"
    icon: mdi:menu
  givenergy_evc_configure_inverter_mode:
    name: "GivEnergy EVC Configure Inverter Mode"
    options:
      - "Solar"
      - "Hybrid"
      - "Grid"
    initial: "Grid"
    icon: mdi:menu
  givenergy_evc_configuration_mode:
    name: "GivEnergy EVC Configuration Mode"
    options:
      - "A: Standalone"
      - "B: Standalone with PV"
      - "C: CT Meter"
      - "D: Inverter Cloud Control"
    initial: "A: Standalone"
    icon: mdi:menu

input_number:
  givenergy_evc_solar_export_split:
    name: "GivEnergy EVC Solar Export Split"
    mode: slider
    min: 0
    max: 1
    step: 0.1
  givenergy_evc_max_battery_discharge_power:
    name: "GivEnergy EVC Max Battery Discharge Power"
    mode: slider
    min: 0
    max: 24000
    step: 100
    unit_of_measurement: W
  givenergy_evc_charge_power_limit:
    name: "GivEnergy EVC Charge Power Limit"
    mode: slider
    min: 6
    max: 32
    step: 1
    unit_of_measurement: A
  givenergy_evc_session_energy_limit:
    name: "GivEnergy EVC Session Energy Limit"
    mode: slider
    min: 1
    max: 250
    step: 1
    unit_of_measurement: kWh
  givenergy_evc_max_import_capacity:
    name: "GivEnergy EVC Max Import Capacity"
    mode: slider
    min: 40
    max: 100
    step: 10
    unit_of_measurement: A

template:
  - button:
      - name: "GivEnergy EVC Restart Charger"
        unique_id: givenergy_evc_restart
        press:
          - service: rest_command.givenergy_evc_restart_charger
      - name: "GivEnergy EVC Unlock Connector"
        unique_id: givenergy_evc_unlock_connector
        press:
          - service: rest_command.givenergy_evc_unlock_connector
      - name: "GivEnergy EVC Factory Reset"
        unique_id: givenergy_evc_factory_reset
        press:
          - service: rest_command.givenergy_evc_factory_reset
  - binary_sensor:
      - name: "GivEnergy EVC Connected"
        unique_id: givenergy_evc_connected
        state: >-
          {% if is_state('sensor.givenergy_evc_status','Preparing') %}
            true
          {%  elif is_state('sensor.givenergy_evc_status','Charging') %}
            true
          {%  elif is_state('sensor.givenergy_evc_status','SuspendedEVSE') %}
            true
          {%  elif is_state('sensor.givenergy_evc_status','SuspendedEV') %}
            true
          {%  elif is_state('sensor.givenergy_evc_status','Finishing') %}
            true
          {% endif %}
        icon: >-
          {% if is_state('sensor.givenergy_evc_status','Preparing') %}
            mdi:power-plug-battery
          {%  elif is_state('sensor.givenergy_evc_status','Charging') %}
            mdi:power-plug-battery
          {%  elif is_state('sensor.givenergy_evc_status','SuspendedEVSE') %}
            mdi:power-plug-battery
          {%  elif is_state('sensor.givenergy_evc_status','SuspendedEV') %}
            mdi:power-plug-battery
          {%  elif is_state('sensor.givenergy_evc_status','Finishing') %}
            mdi:power-plug-battery
          {% else %}
            mdi:power-plug-battery-outline
          {% endif %}

  - sensor:
    - name: "GivEnergy EVC Car Plugged In"
      state: >-
        {% if is_state('binary_sensor.givenergy_evc_connected','on')  %}
          Plugged In
        {% else %}
          Unplugged
        {% endif %}
      icon: >-
        {% if is_state('binary_sensor.givenergy_evc_connected','on')  %}
          mdi:power-plug-battery
        {% else %}
          mdi:power-plug-battery-outline
        {% endif %}

  - sensor:
    - name: "GivEnergy EVC Car Charging"
      state: >-
        {% if is_state('sensor.givenergy_evc_status','charging') %}
          Charging
        {% else %}
          Not Charging
        {% endif %}
      icon: >-
        {% if is_state('sensor.givenergy_evc_status','charging') %}
          mdi:battery-charging
        {% else %}
          mdi:battery
        {% endif %}

switch:
  - platform: template
    switches:
      givenergy_evc_mode_hybrid:
        friendly_name: "GivEnergy EVC Mode: Hybrid"
        value_template: "{{ is_state('sensor.givenergy_evc_mode', 'Hybrid') }}"
        turn_on:
          service: rest_command.givenergy_evc_setmode
          data:
            mode: Eco
        turn_off:
          service: rest_command.givenergy_evc_setmode
          data:
            mode: Eco
      givenergy_evc_mode_solar:
        friendly_name: "GivEnergy EVC Mode: Solar"
        value_template: "{{ is_state('sensor.givenergy_evc_mode', 'Solar') }}"
        turn_on:
          service: rest_command.givenergy_evc_setmode
          data:
            mode: SuperEco
        turn_off:
          service: rest_command.givenergy_evc_setmode
          data:
            mode: SuperEco
      givenergy_evc_mode_grid:
        friendly_name: "GivEnergy EVC Mode: Grid"
        value_template: "{{ is_state('sensor.givenergy_evc_mode', 'Grid') }}"
        turn_on:
          service: rest_command.givenergy_evc_setmode
          data:
            mode: Boost
        turn_off:
          service: rest_command.givenergy_evc_setmode
          data:
            mode: Boost
      givenergy_evc_mode_inverter_control:
        friendly_name: "GivEnergy EVC Mode: Inverter Control"
        value_template: "{{ is_state('sensor.givenergy_evc_mode', 'Inverter Control') }}"
        turn_on:
          service: rest_command.givenergy_evc_setmode
          data:
            mode: ModbusSlave
        turn_off:
          service: rest_command.givenergy_evc_setmode
          data:
            mode: ModbusSlave
      givenergy_evc_plugandgo:
        friendly_name: "GivEnergy EVC Plug&Go"
        value_template: "{{ is_state('binary_sensor.givenergy_evc_plug_and_go_state', 'on') }}"
        turn_on:
          service: rest_command.givenergy_evc_setplugandgo
          data:
            enabled: "true"
        turn_off:
          service: rest_command.givenergy_evc_setplugandgo
          data:
            enabled: "false"
      givenergy_evc_session_energy_limit:
        friendly_name: "GivEnergy EVC Session Energy Limit"
        value_template: "{{ states('sensor.givenergy_evc_session_energy_limit')|float > 0.1 }}"
        turn_on:
          service: rest_command.givenergy_evc_session_energy_limit
          data:
            limit: "{{ states('input_number.givenergy_evc_session_energy_limit')|float }}"
        turn_off:
          service: rest_command.givenergy_evc_session_energy_limit
          data:
            limit: "null"
      givenergy_evc_max_import_capacity:
        friendly_name: "GivEnergy EVC Max Import Capacity"
        value_template: "{{ states('sensor.givenergy_evc_max_import_capacity')|int > 0 }}"
        turn_on:
          service: rest_command.givenergy_evc_max_import_capacity
          data:
            limit: "{{ states('input_number.givenergy_evc_session_energy_limit')|int }}"
        turn_off:
          service: rest_command.givenergy_evc_max_import_capacity
          data:
            limit: "Null"
      givenergy_evc_chargingstopstart:
        friendly_name: "GivEnergy EVC Charging Stop/Start"
        value_template: "{{ is_state('sensor.givenergy_evc_status', 'Charging') }}"
        turn_on:
          service: rest_command.givenergy_evc_startcharge
          data: {}
        turn_off:
          service: rest_command.givenergy_evc_stopcharge
          data: {}
      givenergy_evc_leds:
        friendly_name: "GivEnergy EVC LEDs"
        value_template: "{{ is_state('binary_sensor.givenergy_evc_led_state', 'on') }}"
        turn_on:
          service: rest_command.givenergy_evc_leds
          data:
            value: "1"
        turn_off:
          service: rest_command.givenergy_evc_leds
          data:
            value: "0"
      givenergy_evc_leds:
        friendly_name: "GivEnergy EVC Local Control"
        value_template: "{{ is_state('binary_sensor.givenergy_evc_local_control', 'on') }}"
        turn_on:
          service: rest_command.givenergy_evc_local_control
          data:
            value: "1"
        turn_off:
          service: rest_command.givenergy_evc_local_control
          data:
            value: "0"

rest_command:
  givenergy_evc_setmode:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/change-mode'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    payload: '{"mode": "{{ mode }}"}'
  givenergy_evc_set_configuration_mode:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/configuration-mode/'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    payload: '{"mode": "{{ mode }}"}'
  givenergy_evc_setplugandgo:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/set-plug-and-go/'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    payload: '{"enabled": {{ enabled }}}'
  givenergy_evc_session_energy_limit:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/set-session-energy-limit/'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    payload: '{"limit": {{ limit }}}'
  givenergy_evc_max_import_capacity:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/set-max-import-capacity/'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    payload: '{"value": {{ value }}}'
  givenergy_evc_startcharge:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/start-charge'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
  givenergy_evc_stopcharge:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/stop-charge'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
  givenergy_evc_leds:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/enable-front-panel-led/'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    payload: '{"value": {{ value }}}'
  givenergy_evc_charge_power_limit:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/adjust-charge-power-limit/'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    payload: '{"limit": {{ value }}}'
  givenergy_evc_restart_charger:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/restart-charger'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
  givenergy_evc_factory_reset:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/perform-factory-reset'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
  givenergy_evc_unlock_connector:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/unlock-connector'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
  givenergy_evc_inverter_control_mode:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/configure-inverter-control/'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    payload: '{"mode": {{ mode }}}'
  givenergy_evc_configure_inverter_control:
    url: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/configure-inverter-control/'
    method: POST
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    payload: >-
      {
        "inverter_battery_export_split": {{ states('input_number.givenergy_evc_solar_export_split')|float }},
        "max_battery_discharge_power_to_evc": {{ states('input_number.givenergy_evc_max_battery_discharge_power')|int }},
        "mode": {% if is_state('input_select.givenergy_evc_configure_inverter_mode','Solar') %} "SuperEco" {% elif is_state('input_select.givenergy_evc_configure_inverter_mode','Hybrid') %} "Eco" {% else %} "Boost" {% endif %}
      }

rest:
  - resource_template: "https://api.givenergy.cloud/v1/ev-charger?page=1"
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    sensor:
      - name: "GivEnergy EVC Status"
        unique_id: givenergy_evc_status
        value_template: "{{ value_json.data[0].status }}"
        icon: >
          {% if value_json.data[0].status == 'Charging' or value_json.data[0].status == 'Finishing' %}
            mdi:battery-charging-outline
          {% elif value_json.data[0].status == 'Preparing' or value_json.data[0].status == 'SuspendedEVSE' or value_json.data[0].status == 'SuspendedEV' %}
            mdi:power-plug-battery-outline
          {% else %}
            mdi:power-plug-off-outline
          {% endif %}
      - name: "GivEnergy EVC UUID "
        unique_id: givenergy_evc_uuid
        value_template: "{{ value_json.data[0].uuid }}"
      - name: "GivEnergy EVC Power "
        unique_id: givenergy_evc_power
        value_template: >-
          {% if value_json.data[0].power_now is defined %}
            {{ value_json.data[0].power_now.value }}
          {% else %}
            0
          {% endif %}
        device_class: "power"
        state_class: "measurement"
        unit_of_measurement: "kW"
      - name: "GivEnergy EVC Power (W)"
        unique_id: givenergy_evc_power_watts
        value_template: >-
          {% if value_json.data[0].power_now is defined %}
            {{ ((value_json.data[0].power_now.value)|float * 1000)|int }}
          {% else %}
            0
          {% endif %}
        device_class: "power"
        state_class: "measurement"
        unit_of_measurement: "W"
  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/meter-data?start_time={{ (utcnow() - timedelta( minutes = 1 )).strftime("%Y-%m-%dT%H:%M:%SZ") }}&end_time={{ utcnow().strftime("%Y-%m-%dT%H:%M:%SZ") }}&measurands[]=4&meter_ids[]=0&page=1&pageSize=1'
    scan_interval: 300
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    sensor:
      - name: "GivEnergy EVC Energy"
        unique_id: givenergy_evc_energy
        value_template: "{{ value_json.data[0].measurements[0].value }}"
        device_class: "energy"
        state_class: "total_increasing"
        unit_of_measurement: "Wh"
  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/change-mode/'
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    sensor:
      - name: "GivEnergy EVC Mode"
        unique_id: givenergy_evc_mode
        value_template: >-
          {% if value_json.data[0].active %}
            Solar
          {% elif value_json.data[1].active %}
            Hybrid
          {% elif value_json.data[2].active %}
            Grid
          {% elif value_json.data[3].active %}
            Inverter Control
          {% else %}
            Unknown
          {% endif %}

  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/configure-inverter-control/'
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    sensor:
      - name: "GivEnergy EVC Solar Export Split"
        unique_id: givenergy_evc_solar_export_split
        value_template: "{{ value_json.data.inverter_battery_export_split }}"
      - name: "GivEnergy EVC Max Battery Discharge Power"
        unique_id: givenergy_evc_max_battery_discharge_power
        unit_of_measurement: W
        value_template: "{{ value_json.data.max_battery_discharge_power_to_evc }}"
      - name: "GivEnergy EVC Inverter Control Mode"
        unique_id: givenergy_evc_inverter_control_mode
        value_template: "{{ value_json.data.mode }}"

  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/configuration-mode/'
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    sensor:
      - name: "GivEnergy EVC Configuration Mode"
        unique_id: givenergy_evc_configuration_mode
        value_template: "{{ value_json.data.value }}"

  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/set-session-energy-limit/'
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    sensor:
      - name: "GivEnergy EVC Session Energy Limit"
        unique_id: givenergy_evc_session_energy_limit
        unit_of_measurement: kWh
        value_template: "{% if is_number(value_json.data.value) %} {{ value_json.data.value }} {% else %} 0 {% endif %}"

  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/set-max-import-capacity/'
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    sensor:
      - name: "GivEnergy EVC Max Import Capacity"
        unique_id: givenergy_evc_max_import_capacity
        unit_of_measurement: A
        value_template: "{{ value_json.data.value }}"

  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/set-plug-and-go/'
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    binary_sensor:
      - name: "GivEnergy EVC Plug And Go State"
        unique_id: givenergy_evc_plugandgo_state
        value_template: "{{ value_json.data.value }}"

  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/enable-front-panel-led/'
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    binary_sensor:
      - name: "GivEnergy EVC LED State"
        unique_id: givenergy_evc_led_state
        value_template: "{{ value_json.data.value }}"

  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/enable-local-control/'
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    binary_sensor:
      - name: "GivEnergy EVC Local Control"
        unique_id: givenergy_evc_local_control
        value_template: "{{ value_json.data.value }}"

  - resource_template: 'https://api.givenergy.cloud/v1/ev-charger/{{ states("sensor.givenergy_evc_uuid") }}/commands/adjust-charge-power-limit/'
    scan_interval: 15
    headers:
      Authorization: !secret givenergy_apikey
      Accept: "application/json"
      Content-Type: "application/json"
    sensor:
      - name: "GivEnergy EVC Charge Power Limit"
        unique_id: givenergy_evc_charge_power_limit
        unit_of_measurement: A
        value_template: "{{ value_json.data.value }}"

automation:
  - alias: GivEnergy EVC Mode
    description: ""
    trigger:
      - platform: state
        entity_id:
          - sensor.givenergy_evc_mode
        id: get_mode
      - platform: state
        entity_id:
          - input_select.givenergy_evc_mode
        id: set_mode
        from: null
        to: null
    condition: []
    action:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - get_mode
            sequence:
              - service: input_select.select_option
                metadata: {}
                data:
                  option: "{{ states('sensor.givenergy_evc_mode') }}"
                target:
                  entity_id: input_select.givenergy_evc_mode
          - conditions:
              - condition: trigger
                id:
                  - set_mode
            sequence:
              - service: rest_command.givenergy_evc_setmode
                metadata: {}
                data_template:
                  mode: |
                    {% if is_state('input_select.givenergy_evc_mode','Hybrid') %}
                      Eco
                    {% elif is_state('input_select.givenergy_evc_mode','Solar') %}
                      SuperEco
                    {% elif is_state('input_select.givenergy_evc_mode','Grid') %}
                      Boost
                    {% else %}
                      ModbusSlave
                    {% endif %}
    mode: single
  - alias: GivEnergy EVC Max Discharge Power
    description: ""
    triggers:
      - trigger: state
        entity_id:
          - sensor.givenergy_evc_max_battery_discharge_power
        from: null
        to: null
        id: get_value
      - trigger: state
        entity_id:
          - input_number.givenergy_evc_max_battery_discharge_power
        from: null
        to: null
        id: set_value
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - get_value
            sequence:
              - action: input_number.set_value
                metadata: {}
                data:
                  value: >-
                    {{
                    states('sensor.givenergy_evc_max_battery_discharge_power')|float
                    }}
                target:
                  entity_id: input_number.givenergy_evc_max_battery_discharge_power
          - conditions:
              - condition: trigger
                id:
                  - set_value
            sequence:
              - metadata: {}
                data: {}
                action: rest_command.givenergy_evc_configure_inverter_control
    mode: single

  - alias: GivEnergy Solar Export Split
    description: ""
    triggers:
      - trigger: state
        entity_id:
          - sensor.givenergy_evc_solar_export_split
        from: null
        to: null
        id: get_value
      - trigger: state
        entity_id:
          - input_number.givenergy_evc_solar_export_split
        from: null
        to: null
        id: set_value
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - get_value
            sequence:
              - action: input_number.set_value
                metadata: {}
                data:
                  value: "{{ states('sensor.givenergy_evc_solar_export_split')|float }}"
                target:
                  entity_id: input_number.givenergy_evc_solar_export_split
          - conditions:
              - condition: trigger
                id:
                  - set_value
            sequence:
              - metadata: {}
                data: {}
                action: rest_command.givenergy_evc_configure_inverter_control
    mode: single

  - alias: GivEnergy EVC Configure Inverter Mode
    triggers:
      - entity_id:
          - sensor.givenergy_evc_inverter_control_mode
        id: get_mode
        trigger: state
      - entity_id:
          - input_select.givenergy_evc_configure_inverter_mode
        id: set_mode
        from: null
        to: null
        trigger: state
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - get_mode
            sequence:
              - metadata: {}
                data:
                  option: >-
                    {% if is_state('sensor.givenergy_evc_inverter_control_mode','SuperEco') %}
                      Solar
                    {% elif is_state('sensor.givenergy_evc_inverter_control_mode','Eco') %}
                      Hybrid
                    {% else %}
                      Boost
                    {% endif %}
                target:
                  entity_id: input_select.givenergy_evc_configure_inverter_mode
                action: input_select.select_option
          - conditions:
              - condition: trigger
                id:
                  - set_mode
            sequence:
              - metadata: {}
                data: {}
                action: rest_command.givenergy_evc_configure_inverter_control
    mode: single
    
  - alias: GivEnergy EVC Charge Power Limit
    triggers:
      - trigger: state
        entity_id:
          - sensor.givenergy_evc_charge_power_limit
        from: null
        to: null
        id: get_value
      - trigger: state
        entity_id:
          - input_number.givenergy_evc_charge_power_limit
        from: null
        to: null
        id: set_value
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - get_value
            sequence:
              - action: input_number.set_value
                metadata: {}
                data:
                  value: "{{ states('sensor.givenergy_evc_charge_power_limit')|int }}"
                target:
                  entity_id: input_number.givenergy_evc_charge_power_limit
          - conditions:
              - condition: trigger
                id:
                  - set_value
            sequence:
              - metadata: {}
                data_template:
                  value: >
                    {{ states('input_number.givenergy_evc_charge_power_limit')|int
                    }}
                action: rest_command.givenergy_evc_charge_power_limit
    mode: single

  - alias: GivEnergy EVC Configuration Mode
    triggers:
      - entity_id:
          - sensor.givenergy_evc_configuration_mode
        id: get_mode
        trigger: state
      - entity_id:
          - input_select.givenergy_evc_configuration_mode
        id: set_mode
        from: null
        to: null
        trigger: state
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - get_mode
            sequence:
              - metadata: {}
                data:
                  option: >
                    {% if is_state('sensor.givenergy_evc_configuration_mode','A') %}
                      A: Standalone
                    {% elif is_state('sensor.givenergy_evc_configuration_mode','B')
                    %}
                      B: Standalone with PV
                    {% elif is_state('sensor.givenergy_evc_configuration_mode','C')
                    %}
                      C: CT Meter
                    {% elif is_state('sensor.givenergy_evc_configuration_mode','D')
                    %}
                      D: Inverter Cloud Control
                    {% else %}
                      Unknown
                    {% endif %}
                target:
                  entity_id: input_select.givenergy_evc_configuration_mode
                action: input_select.select_option
          - conditions:
              - condition: trigger
                id:
                  - set_mode
            sequence:
              - metadata: {}
                data_template:
                  mode: >
                    {% if
                    is_state('input_select.givenergy_evc_configuration_mode','A:
                    Standalone') %}
                      A
                    {% elif
                    is_state('input_select.givenergy_evc_configuration_mode','B:
                    Standalone with PV') %}
                      B
                    {% elif
                    is_state('input_select.givenergy_evc_configuration_mode','C: CT
                    Meter') %}
                      C
                    {% elif
                    is_state('input_select.givenergy_evc_configuration_mode','D:
                    Inverter Cloud Control') %}
                      D
                    {% else %}
                      Unknown
                    {% endif %}
                action: rest_command.givenergy_evc_set_configuration_mode
    mode: single
  - alias: GivEnergy EVC Max Import Capacity
    triggers:
      - trigger: state
        entity_id:
          - sensor.givenergy_evc_max_import_capacity
        from: null
        to: null
        id: get_value
      - trigger: state
        entity_id:
          - input_number.givenergy_evc_max_import_capacity
        from: null
        to: null
        id: set_value
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - get_value
            sequence:
              - action: input_number.set_value
                metadata: {}
                data:
                  value: "{{ states('sensor.givenergy_evc_max_import_capacity')|int }}"
                target:
                  entity_id: input_number.givenergy_evc_max_import_capacity
          - conditions:
              - condition: trigger
                id:
                  - set_value
            sequence:
              - metadata: {}
                data_template:
                  value: >
                    {{ states('input_number.givenergy_evc_max_import_capacity')|int
                    }}
                action: rest_command.givenergy_evc_max_import_capacity
    mode: single

  - alias: GivEnergy EVC Session Energy Limit
    triggers:
      - trigger: state
        entity_id:
          - sensor.givenergy_evc_session_energy_limit
        from: null
        to: null
        id: get_value
      - trigger: state
        entity_id:
          - input_number.givenergy_evc_session_energy_limit
        from: null
        to: null
        id: set_value
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - get_value
            sequence:
              - action: input_number.set_value
                metadata: {}
                data:
                  value: "{{ states('sensor.givenergy_evc_session_energy_limit')|float }}"
                target:
                  entity_id: input_number.givenergy_evc_session_energy_limit
          - conditions:
              - condition: trigger
                id:
                  - set_value
            sequence:
              - metadata: {}
                data_template:
                  limit: >
                    {{
                    states('input_number.givenergy_evc_session_energy_limit')|float
                    }}
                action: rest_command.givenergy_evc_session_energy_limit
    mode: single
