substitutions:
  devicename: "knightsbridge-cu9kw"
  devicename_upper: Knightsbridge-CU9KW

esphome:
  name: $devicename

esp8266:
  # No idea what kind of board is it so using a generic one
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

improv_serial:
ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$devicename Hotspot"
    password: !secret ap_password

web_server:
  port: 80

captive_portal:

output:
  - platform: gpio
    id: relay_1
    pin: GPIO15 # relay 1
  - platform: gpio
    id: relay_2
    pin: GPIO4 # relay 2
  - platform: gpio
    id: led_1
    pin: 
      number: GPIO2 # led 1
      inverted: true
  - platform: gpio
    id: led_2
    pin: 
      number: GPIO0 # led 2
      inverted: true

switch:
  - platform: output
    output: relay_1
    name: "$devicename Outlet 1"
    id: cu9kw_socket_1
    icon: mdi:power-socket-uk
    on_turn_on:
      - output.turn_on: led_1
    on_turn_off:
      - output.turn_off: led_1
  - platform: output
    name: "$devicename Outlet 2"
    id: cu9kw_socket_2
    output: relay_2
    icon: mdi:power-socket-uk
    on_turn_on:
      - output.turn_on: led_2
    on_turn_off:
      - output.turn_off: led_2

binary_sensor:

  - platform: gpio
    id: button_1
    pin:
      number: GPIO16 # button 1
      mode:
        input: true
        pullup: false # GPIO16 doesn't have a pullup resistor
      inverted: false
    on_press:
      - switch.toggle: cu9kw_socket_1

  - platform: gpio
    id: button_2
    pin:
      number: GPIO13 # button 2
      mode:
        input: true
        pullup: true
      inverted: false
    on_press:
      - switch.toggle: cu9kw_socket_2

sensor:
  - platform: hlw8012
    model: BL0937
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO5
    cf1_pin: GPIO14
    current:
      name: "$devicename_upper current"
    voltage:
      name: "$devicename_upper voltage"
    power:
      name: "$devicename_upper power"
    energy:
      name: "$devicename_upper energy"
    update_interval: 10s
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
  - platform: wifi_signal
    name: "$devicename_upper WiFi Signal Sensor"
    update_interval: 60s
  - platform: uptime
    name: "$devicename_upper Uptime Sensor"

button:
  - platform: restart
    name: "$devicename Restart"
  - platform: safe_mode
    name: "$devicename Restart (Safe Mode)"
  - platform: factory_reset
    name: "$devicename Factory Reset"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "Mac Address"
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
