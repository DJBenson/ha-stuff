esphome:
  name: cat-wheel-tracker
  on_boot:
    then:
      - lambda: |-
          id(lcd_display).backlight();
          id(lcd_backlight_switch).publish_state(true);
          id(distance_today).update();
          id(distance_total).update();
          id(speed_max).update();
          id(speed_sensor).publish_state(0.0);
          id(last_rotation_time_persisted) = id(last_rotation_time);
          id(boot_time) = millis();

esp32:
  board: esp32dev
  framework:
    type: arduino

network:
  enable_ipv6: false

wifi:
  ssid: "YourWiFiSSID"
  password: "YourWiFiPassword"

  ap:
    ssid: "CatWheel Fallback"
    password: "fallback123"

captive_portal:

logger:

api:

ota:
  platform: esphome

web_server:
  port: 80

i2c:
  sda: 21
  scl: 22
  scan: true

display:
  - platform: lcd_pcf8574
    dimensions: 20x4
    address: 0x27
    update_interval: 1s
    id: lcd_display
    lambda: |-
      if (millis() - id(boot_time) < 5000) {
        // Splash screen for first 5 seconds
        it.printf(6, 0, "ESPHome");
        it.printf(7, 1, "Smart");
        it.printf(8, 2, "Cat");
        it.printf(7, 3, "Wheel");
      } else {
        it.printf(0, 0, "Speed:  %.1f mph", id(speed_sensor).state);
        it.printf(0, 1, "Max:    %.1f mph", id(speed_max).state);
        it.printf(0, 2, "Dist:   %.1f mi", id(distance_today).state);
        it.printf(0, 3, "Total:  %.1f mi", id(distance_total).state);
      }

time:
  - platform: homeassistant
    id: my_time
    timezone: "Europe/London"
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - script.execute: daily_reset

binary_sensor:
  - platform: gpio
    pin:
      number: 25
      mode: INPUT
      inverted: true
    name: "Wheel Sensor"
    id: reed_switch
    filters:
      - delayed_on_off: 10ms
    on_press:
      then:
        - script.execute: record_rotation

sensor:
  - platform: template
    name: "Current Speed"
    id: speed_sensor
    lambda: |-
      return 0.0;  // initial value; overwritten by script
    unit_of_measurement: "mph"
    accuracy_decimals: 2
    icon: "mdi:speedometer"
    update_interval: never

  - platform: template
    name: "Distance Today"
    id: distance_today
    lambda: |-
      return id(distance_today_val) * 0.000621371;
    unit_of_measurement: "mi"
    accuracy_decimals: 2
    icon: "mdi:run"
    update_interval: never

  - platform: template
    name: "Total Distance"
    id: distance_total
    lambda: |-
      return id(distance_total_val) * 0.000621371;
    unit_of_measurement: "mi"
    accuracy_decimals: 2
    icon: "mdi:map-marker-distance"
    update_interval: never

  - platform: template
    name: "Max Speed"
    id: speed_max
    lambda: |-
      return id(speed_max_val) * 2.23694;
    unit_of_measurement: "mph"
    accuracy_decimals: 2
    icon: "mdi:speedometer"
    update_interval: never

text_sensor:
  - platform: template
    name: "Last Movement"
    id: time_since_last_move
    update_interval: 10s
    lambda: |-
      uint32_t now = millis();
      uint32_t last = id(last_rotation_time_persisted);
      if (last == 0) {
        return {"Never"};
      }
      uint32_t diff = (now - last) / 1000;

      if (diff < 60) {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "%lus ago", diff);
        return {buffer};
      } else if (diff < 3600) {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "%lum ago", diff / 60);
        return {buffer};
      } else {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "%luh ago", diff / 3600);
        return {buffer};
      }

globals:
  - id: last_rotation_time_persisted
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: wheel_circumference
    type: float
    initial_value: '3.6449'

  - id: last_rotation_time
    type: uint32_t
    restore_value: no
    initial_value: '0'

  - id: distance_today_val
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: distance_total_val
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: speed_max_val
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: boot_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

script:
  - id: record_rotation
    then:
      - lambda: |-
          static uint32_t last_rotation = 0;
          uint32_t now = millis();
          if (last_rotation != 0) {
            float delta_sec = (now - last_rotation) / 1000.0;
            float speed = id(wheel_circumference) / delta_sec;
            id(speed_sensor).publish_state(speed * 2.23694);
            if (speed > id(speed_max_val) + 0.1) {
              id(speed_max_val) = speed;
              id(speed_max).update();
            }
          }
          last_rotation = now;
          id(distance_today_val) += id(wheel_circumference);
          id(distance_total_val) += id(wheel_circumference);
          id(distance_today).update();
          id(distance_total).update();
          id(last_rotation_time) = millis();
          id(last_rotation_time_persisted) = id(last_rotation_time);

  - id: daily_reset
    then:
      - lambda: |-
          id(distance_today_val) = 0.0;
          id(speed_max_val) = 0.0;
          id(distance_today).update();
          id(speed_max).update();

  - id: reset_all_stats
    then:
      - lambda: |-
          id(distance_today_val) = 0.0;
          id(distance_total_val) = 0.0;
          id(speed_max_val) = 0.0;
          id(distance_today).update();
          id(distance_total).update();
          id(speed_max).update();

  - id: save_all_stats
    then:
      - logger.log: "Triggered save_all_stats (noop â€” values auto-persist)" 

button:
  - platform: template
    name: "Reset All Stats"
    id: reset_all_button
    on_press:
      then:
        - script.execute: reset_all_stats

  - platform: restart
    name: "Reboot Device"
    id: reboot_button

  - platform: safe_mode
    name: "Reboot to Safe Mode"

  - platform: template
    name: "Factory Reset"
    id: factory_reset_button
    on_press:
      then:
        - script.execute: reset_all_stats
        - delay: 1s
        - button.press: reboot_button

interval:
  - interval: 1min
    then:
      - script.execute: save_all_stats

  - interval: 500ms
    then:
      - lambda: |-
          uint32_t now = millis();
          if (id(last_rotation_time) != 0 && now - id(last_rotation_time) > 2000) {
            if (id(speed_sensor).state != 0.0) {
              id(speed_sensor).publish_state(0.0);
            }
          }

switch:
  - platform: template
    name: "LCD Backlight"
    id: lcd_backlight_switch
    optimistic: true
    turn_on_action:
      - lambda: |-
          id(lcd_display).backlight();
    turn_off_action:
      - lambda: |-
          id(lcd_display).no_backlight();
